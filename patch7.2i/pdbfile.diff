--- p.py	2018-02-28 15:49:05.000000000 -0500
+++ pdbfile.py	2017-01-12 14:04:34.000000000 -0500
@@ -147,16 +147,31 @@
                     newAtom = top.addAtom(atomName, element, r, str(atom.serial_number))
                     atomByNumber[atom.serial_number] = newAtom
         self._positions = []
+        self._temperature_factor = []
+        self._occupancy = []
         for model in pdb.iter_models(True):
             coords = []
+            temp_factors = []
+            occupancies = []
             for chain in model.iter_chains():
                 for residue in chain.iter_residues():
                     for atom in residue.iter_atoms():
+                        # position
                         pos = atom.get_position().value_in_unit(nanometers)
                         coords.append(Vec3(pos[0], pos[1], pos[2]))
+                        # temperature factor
+                        temp_factor = atom.get_temperature_factor().value_in_unit(angstroms*angstroms) # note Ang are the native pdb units
+                        temp_factors.append(temp_factor)
+                        # occupancy
+                        occupancy = atom.get_occupancy() # unitless
+                        occupancies.append(occupancy)
             self._positions.append(coords*nanometers)
+            self._temperature_factor.append(temp_factors*angstroms*angstroms)
+            self._occupancy.append(occupancies)
         ## The atom positions read from the PDB file.  If the file contains multiple frames, these are the positions in the first frame.
         self.positions = self._positions[0]
+        self.temperature_factor = self._temperature_factor[0]
+        self.occupancy = self._occupancy[0]
         self.topology.setPeriodicBoxVectors(pdb.get_periodic_box_vectors())
         self.topology.createStandardBonds()
         self.topology.createDisulfideBonds(self.positions)
